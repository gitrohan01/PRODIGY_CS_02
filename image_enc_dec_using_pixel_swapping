from PIL import Image
import numpy as np
import argparse

def encrypt_image(image_path, key):
    image = Image.open(image_path)
    image_array = np.array(image)
    encrypted_array = (image_array + key) % 256
    encrypted_image = Image.fromarray(encrypted_array.astype('uint8'))
    return encrypted_image

def decrypt_image(encrypted_image_path, key):
    encrypted_image = Image.open(encrypted_image_path)
    encrypted_array = np.array(encrypted_image)
    decrypted_array = (encrypted_array - key) % 256
    decrypted_image = Image.fromarray(decrypted_array.astype('uint8'))
    return decrypted_image

def main():
    parser = argparse.ArgumentParser(description="Image Encryption and Decryption Tool")
    parser.add_argument("mode", choices=["encrypt", "decrypt"], help="Mode: encrypt or decrypt")
    parser.add_argument("image_path", help="Path to the image file")
    parser.add_argument("key", type=int, help="Encryption/Decryption key (integer)")
    parser.add_argument("output_path", help="Path to save the output image")

    args = parser.parse_args()

    if args.mode == "encrypt":
        encrypted_image = encrypt_image(args.image_path, args.key)
        encrypted_image.save(args.output_path)
        print(f"Image encrypted and saved to {args.output_path}")
    elif args.mode == "decrypt":
        decrypted_image = decrypt_image(args.image_path, args.key)
        decrypted_image.save(args.output_path)
        print(f"Image decrypted and saved to {args.output_path}")

if __name__ == "__main__":
    main()

#how to encrypt:
#python tool.py encrypt path/to/image.png 50 path/to/encrypted_image.png

#how to decrypt:
python tool.py decrypt path/to/encrypted_image.png 50 path/to/decrypted_image.png

